<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.StudentMapper">

    <!-- select students by teacher -->
    <select id="getStudents" resultMap="StudentTeacherB">
        SELECT s.*
        FROM student s,
             teacher t
        WHERE s.student_teacher = t.teacher_id
          AND t.teacher_id = #{teacherId}
    </select>

    <resultMap id="StudentTeacherB" type="com.example.demo.model.Student">
        <result property="studentId" column="student_id"/>
        <result property="studentName" column="student_name"/>
        <result property="studentAge" column="student_age"/>
        <result property="studentSex" column="student_sex"/>
        <association property="teacher" javaType="com.example.demo.model.Teacher">
            <result property="teacherId" column="teacher_id"/>
        </association>
    </resultMap>


    <!-- get a teacher by id with a list of students -->
    <select id="getATeacherById" resultMap="TeacherStudent">
        SELECT *
        FROM teacher
        WHERE teacher_id = #{teacherId}
    </select>
    <resultMap id="TeacherStudent" type="com.example.demo.model.Teacher">
        <result property="teacherId" column="teacher_id"/>
        <result property="teacherName" column="teacher_name"/>
        <result property="teacherAge" column="teacher_age"/>
        <result property="teacherSex" column="teacher_sex"/>
        <collection property="students" javaType="ArrayList" ofType="com.example.demo.model.Student"
                    select="getStudentsByTeacherId" column="teacher_id"/>
    </resultMap>
    <select id="getStudentsByTeacherId" resultType="com.example.demo.model.Student">
        SELECT *
        FROM student
        WHERE student_teacher = #{teacherId}
    </select>


    <!-- add student(s) -->
    <insert id="addStudent" parameterType="com.example.demo.model.Student">
        INSERT INTO student (student_name, student_sex, student_age, student_teacher)
        VALUES
        <foreach collection="list" item="student" separator=",">
            (#{student.studentName}, #{student.studentSex}, #{student.studentAge}, #{student.teacher})
        </foreach>
    </insert>


    <!-- get teachers -->
    <select id="getTeachers" resultType="com.example.demo.model.Teacher">
        SELECT *
        FROM teacher
    </select>

    <!-- get students -->
    <select id="getStudentsAll" resultType="com.example.demo.model.Student">
        SELECT *
        FROM student
    </select>

    <!-- delete a student -->
    <delete id="deleteStudent" parameterType="com.example.demo.model.Student">
        DELETE
        FROM student
        WHERE student_id IN
        <foreach collection="list" item="student" separator="," open="(" close=")">
            #{student.studentId}
        </foreach>
    </delete>

    <!-- get student with teacher -->
    <select id="getStudentWithTeacherBySId" resultMap="getTeacherByStudent">
        SELECT *
        FROM student st,
             teacher t
        WHERE st.student_id = t.teacher_id
          AND st.student_id = #{studentId}
    </select>
    <resultMap id="getTeacherByStudent" type="com.example.demo.model.StudentInfo">
        <result property="studentId" column="student_id"/>
        <result property="studentName" column="student_name"/>
        <result property="studentAge" column="student_age"/>
        <result property="studentSex" column="student_sex"/>
        <collection property="teacher" javaType="com.example.demo.model.Teacher" ofType="com.example.demo.model.Teacher"
                    select="getTeacherByStudentId" column="teacher_id"/>
    </resultMap>
    <select id="getTeacherByStudentId" resultType="com.example.demo.model.Teacher">
        SELECT *
        FROM teacher
        WHERE teacher_id = #{teacherId}
    </select>


    <!-- update student -->
    <update id="updateStudent" parameterType="com.example.demo.model.Student">
        <foreach collection="list" item="student" open="" close="" separator=";">
            UPDATE student
            <set>
                student_name = #{student.studentName},
                student_age = #{student.studentAge},
                student_sex = #{student.studentSex},
                student_teacher = #{student.teacher}
            </set>
            WHERE student_id = ${student.studentId}
        </foreach>
    </update>


    <!-- copy student ( age <= 15 ) info from main table to another table -->
    <insert id="insertIntoAge15" parameterType="com.example.demo.model.Student">
        INSERT INTO student_age_15 (student_id, student_name, student_sex, student_age, student_teacher)
        SELECT *
        FROM student
        WHERE student_age &lt;= 15
    </insert>


    <!-- copy student ( age > 16 ) info from main table to another table -->
    <insert id="insertIntoAge16" parameterType="com.example.demo.model.Student">
        INSERT INTO student_age_16 (student_id, student_name, student_sex, student_age, student_teacher)
        SELECT *
        FROM student
        WHERE student_age &gt; 16
    </insert>


    <!-- add student to two new age tables according to their ages -->
    <insert id="addStudentByAge" parameterType="com.example.demo.model.Student">
        <foreach collection="list" item="student" separator=";">
        <choose>
            <when test="student.studentAge &lt;= 15">
                INSERT INTO student_age_15 (student_name, student_sex, student_age, student_teacher)
                VALUES (#{student.studentName}, #{student.studentSex}, #{student.studentAge}, #{student.teacher})
            </when>
            <when test="student.studentAge &gt; 16">
                INSERT INTO student_age_16 (student_name, student_sex, student_age, student_teacher)
                VALUES (#{student.studentName}, #{student.studentSex}, #{student.studentAge}, #{student.teacher})
            </when>
            <otherwise></otherwise>
        </choose>
        </foreach>
    </insert>
</mapper>